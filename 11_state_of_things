## Go implementation

I am developing opwords in go version. Didn't have time for this past week, but want to push it in week ahead.

## Unmotivated Museum

I was remembering some awesome developers from the past. Like cube2 developer. He made language Lobster. While reading about it, 
it's sort of depressing. He is such an awesome developer, technically more advanced than me in any possible way. His language seems
much more advanced, faster, ant elegant ... and it made no impact. 

I rememebered some other great developers from the past ... the Pixel from Cave story. Kenta cho, ... I started looking into this
by finding extraordinaire people that made orca (midi programming env) and some other cool projects. I should make a webpage with
these exceptional individuals.

## Ryesh - rye shell

I saw and writing a basic shell (in go) is no big deal. Maybe we could write a Rejy / Rye shell that would give "power of rye" to
the command line. It would be like repl with default command execution and cd. 

Then I remembered my idea for online learning environment for kids. Where they would have @process @user @global (tuple space?) 
and @friend. This would make your shell device independant and also enable communication with friends. Like sending messages,
files, publishing to subscribers, subscribimg... etc. Besides you communicating via these scopes, you program could also do the 
same very simply. It would basically make service like twitter an OS level layer. Or extend your os, to twitter like 
communications.

## Ryk - rake for data

Has .ryk-init which can load functions, scripts, libs. Has functions to process JSON / XML streams also, turn text to JSON 
objects and reverse.

## But first

We still have to make our little language more complete. Adding opwords is first part ... adding context avare functions would be
next one. Not that cruicial, but would base the whole "short word API" starting point.

So the plan in opwords + simple tags + simple tag sensitive functions. Then next step would be simple shell and experimenting 
with @user for starters. Where you can set @user level values across multiple devices. Maybe adding user level hooks option. 
First examples of mobile code...

That's it for now

## First steps of shell

This development will be useful for making a good language "repl" or/and if we make the "os shell" with the language we had idea.
I believe more can be done than it's standard repl/shell in terms of interactive behaviour.

About the shell, I want to explore the @user @proc @WORLD ideas

The sad thing is that it seems there is no way to get character under cursor. For example. You do ls ... go over a file and it 
gets copied in your current input.

Otherwise, commands for displaying current vocabulary, current state are there.

Maybe we would have lexical scoping in functions only ... no outside words (except whitelabeled maybe). And if you need global
scope you have the standard @proc @user @app @world @users#jimney ... and see if we hit any limits.

The argument would be, that if you need global-ish scopes they are very explicit (or whitelabeled) and by it introspectable
(maybe serializable) not sprinkled around the tree of code. Separation of state and code?

If we could store the environment ( @proc ), current function continuation (state and position) and a callstack of previous 
functions with their continuations we could pause, move and continue the app? 

But can we get all callstack with local states? Callstack itself would be good for debugging also, values too, but it would
be costly to keep track of them. Maybe to be able to produce/scan them on demand (exception or freeze command).

The CPS would probably help here?
